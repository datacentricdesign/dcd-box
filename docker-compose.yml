version: '3'

services:

  hydra-migrate:
    image: oryd/hydra:$HYDRA_VERSION
    container_name: hydra-migrate
    environment:
      - LOG_LEVEL=$LOG_LEVEL
      - HYDRA_SYSTEM_SECRET=$HYDRA_SYSTEM_SECRET
    command:
      migrate sql postgres://$AC_DB_USER:$AC_DB_PASSWORD@postgresd:5432/$AC_DB?sslmode=disable
    restart: on-failure

  keto-migrate:
    image: oryd/keto:$KETO_VERSION
    container_name: keto-migrate
    environment:
      - LOG_LEVEL=$LOG_LEVEL
    command:
      migrate sql postgres://$AC_DB_USER:$AC_DB_PASSWORD@postgresd:5432/$AC_DB?sslmode=disable
    restart: on-failure

  hydra:
    image: oryd/hydra:$HYDRA_VERSION
    container_name: hydra
    ports:
      - 4444:4444
      - 4445:4445
    depends_on:
      - hydra-migrate
    command:
      serve all
    environment:
      - LOG_LEVEL=$LOG_LEVEL
      - SYSTEM_SECRET=$HYDRA_SYSTEM_SECRET
      - DATABASE_URL=postgres://$AC_DB_USER:$AC_DB_PASSWORD@postgresd:5432/$AC_DB?sslmode=disable
      - OAUTH2_CONSENT_URL=$PROTOCOL://$HOST:$PORT/auth/consent
      - OAUTH2_LOGIN_URL=$PROTOCOL://$HOST:$PORT/auth/signin
      - OAUTH2_LOGOUT_REDIRECT_URL=$PROTOCOL://$HOST:$PORT/ui
      - OAUTH2_ISSUER_URL=$PROTOCOL://$HOST:$PORT
      - OAUTH2_SHARE_ERROR_DEBUG=1
      - OAUTH2_ERROR_URL=$PROTOCOL://$HOST:$PORT/auth/error
      - AUTH_CODE_LIFESPAN=24h
      - ID_TOKEN_LIFESPAN=24h
      - ACCESS_TOKEN_LIFESPAN=24h
      - REFRESH_TOKEN_LIFESPAN=720h
      - LOGIN_CONSENT_REQUEST_LIFESPAN=15m
      - ISSUER_URL=$PROTOCOL://$HOST:$PORT
      - HTTPS_ALLOW_TERMINATION_FROM=172.18.0.16/24
      - CORS_ALLOWED_ORIGINS=http://localhost:4200
    volumes:
      - /etc/ssl/certs:/etc/certs
    restart: on-failure

  postgresd:
    image: postgres:9.6
    container_name: postgres
    environment:
      - POSTGRES_USER=$AC_DB_USER
      - POSTGRES_PASSWORD=$AC_DB_PASSWORD
      - POSTGRES_DB=$AC_DB

  ambassador:
    image: quay.io/datawire/ambassador:0.40.2
    container_name: ambassador
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./config/ambassador:/ambassador/ambassador-config
      - /etc/ssl/certs:/etc/certs
    environment:
      # don't try to watch Kubernetes for configuration changes
      - AMBASSADOR_NO_KUBEWATCH=no_kubewatch

  keto:
    image: oryd/keto:$KETO_VERSION
    container_name: keto
    ports:
      - 4466:4466
    depends_on:
      - hydra
      - keto-migrate
    environment:
      - LOG_LEVEL=$LOG_LEVEL
      - DATABASE_URL=postgres://$AC_DB_USER:$AC_DB_PASSWORD@postgresd:5432/$AC_DB?sslmode=disable
      - AUTHENTICATOR_OAUTH2_INTROSPECTION_CLIENT_ID=$KETO_CLIENT_ID
      - AUTHENTICATOR_OAUTH2_INTROSPECTION_CLIENT_SECRET=$KETO_CLIENT_SECRET
      - AUTHENTICATOR_OAUTH2_INTROSPECTION_TOKEN_URL=$PROTOCOL://$HOST:$PORT/oauth2/token
      - AUTHENTICATOR_OAUTH2_INTROSPECTION_URL=$PROTOCOL://$HOST:$PORT/oauth2/introspect
      - AUTHENTICATOR_OAUTH2_CLIENT_CREDENTIALS_TOKEN_URL=$PROTOCOL://$HOST:$PORT/oauth2/token
    restart: on-failure

  configurator:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - HYDRA_VERSION=$HYDRA_VERSION
        - KETO_VERSION=$KETO_VERSION
        - OATHKEEPER_VERSION=$OATHKEEPER_VERSION
    container_name: configurator
    depends_on:
      - hydra
      - keto
    volumes:
      - ./scripts:/scripts
    environment:
      # All of these URLs MUST NOT end with a trailing slash. This is very important!
      - HYDRA_URL=http://hydra:4444
      - HYDRA_ADMIN_URL=http://hydra:4445
      - KETO_URL=http://keto:4466
      - OATHKEEPER_API_URL=http://oathkeeper-api:4456
      - OATHKEEPER_PROXY_URL=$PROTOCOL://$HOST:$PORT

      # This sets the prefix for all resource, action, and subject names.
      # Be aware that this prefix is automatically applied to all OAuth2 Clients as well.
      - "HYDRA_SUBJECT_PREFIX=subjects:hydra:"
      - "HYDRA_RESOURCE_PREFIX=resources:hydra:"
      - "HYDRA_ACTION_PREFIX=actions:hydra:"
      - "OATHKEEPER_RESOURCE_PREFIX=resources:oathkeeper:"
      - "OATHKEEPER_ACTION_PREFIX=actions:oathkeeper:"
      - "KETO_RESOURCE_PREFIX=resources:keto:"
      - "KETO_ACTION_PREFIX=actions:keto:"

      - OATHKEEPER_HYDRA_JWK_SET_ID=jwk:oathkeeper
      - OATHKEEPER_HYDRA_CLIENT_ID=$OATHKEEPER_CLIENT_ID
      - OATHKEEPER_HYDRA_CLIENT_SECRET=$OATHKEEPER_CLIENT_SECRET
      - KETO_HYDRA_CLIENT_ID=$KETO_CLIENT_ID
      - KETO_HYDRA_CLIENT_SECRET=$KETO_CLIENT_SECRET
    restart: on-failure

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - 2181:2181

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - 9092:9092
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=$HOST
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - "KAFKA_CREATE_TOPICS=things:1:1:compact,persons:1:1:compact,properties:1:1:compact,values:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock


  # == == == == == Stores == == == == ==

  influxdb:
    image: influxdb
    container_name: influxdb
    volumes:
      - /data/influxdb:/var/lib/influxdb
    ports:
      - 8086:8086
      - 8083:8083
    environment:
      - INFLUXDB_DB=$INFLUXDB_DB
      - INFLUXDB_ADMIN_ENABLED=true

  mysql:
    image: mysql:5.7
    container_name: mysql
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=$MYSQL_SYSTEM_SECRET
    volumes:
      - /data/mysql:/var/lib/mysql
      - ./config/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - 3306:3306

  # == == == == == Logging == == == == ==

  logspout:
    image: bekt/logspout-logstash
    container_name: logspout
    restart: on-failure
    environment:
      ROUTE_URIS: logstash://logstash:5000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  logstash:
    container_name: logstash
    image: logstash:7.2.0
    command: bin/logstash -f /opt/logstash/logstash.conf
    volumes:
      - ./config/logs/logstash.conf:/opt/logstash/logstash.conf
      - /data/logs:/var/log/logstash


  # == == == == == Services == == == == ==

  netdata:
    image: netdata/netdata
    container_name: netdata
    hostname: dwd.tudelft.nl
    security_opt:
      - apparmor:unconfined
    cap_add:
      - SYS_PTRACE
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - 19999:19999

  # == == == == == Data-Centric Hub == == == == ==

  # == == == == == Data-Centric Hub - APIs == == == == ==

  dcd-api-http:
    image: datacentricdesign/dcd-api-http:latest
    container_name: dcd-api-http
#    build:
#      context: ../dcd-api-http
#      dockerfile: Dockerfile
    environment:
      - LOG_LEVEL=$LOG_LEVEL
      - PORT=4478
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - CRYPTO_KEY=$CRYPTO_KEY
      - MODEL_HOST=$HOST
      - KAFKA=true
      - HTTPS=true
      - GRAFANA_PASSWORD=admin
      - KAFKA_HOST=kafka
      - KAFKA_PORT=$KAFKA_PORT
      - API_URL=$PROTOCOL://$HOST:$PORT/api
      - KETO_URL=$PROTOCOL://$HOST:$PORT
      - HYDRA_ADMIN_URL=http://hydra:4445
      - HYDRA_URL=$PROTOCOL://$HOST:$PORT
      - OATHKEEPER_KEY_URL=http://oathkeeper-api:4456/.well-known/jwks.json
      - OAUTH2_TOKEN_URL=$PROTOCOL://$HOST:$PORT/oauth2/token
      - OAUTH2_CLIENT_ID=$API_HTTP_CLIENT_ID
      - OAUTH2_CLIENT_SECRET=$API_HTTP_CLIENT_SECRET
      - OAUTH2_INTROSPECT_URL=$PROTOCOL://$HOST:$PORT/oauth2/introspect
    volumes:
      - /data/files:/usr/src/app/files

  dcd-api-mqtt:
    image: datacentricdesign/dcd-api-mqtt:latest
#    build:
#      context: ../dcd-api-mqtt
#      dockerfile: Dockerfile
    container_name: dcd-api-mqtt
    ports:
      - 8883:8883
    environment:
      - LOG_LEVEL=$LOG_LEVEL
      - HTTPS=true
      - GRAFANA_PASSWORD=admin
      - MQTT_HOST=0.0.0.0
      - MQTT_PORT=8883
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - CRYPTO_KEY=$CRYPTO_KEY
      - KAFKA=true
      - KAFKA_HOST=kafka
      - KAFKA_PORT=$KAFKA_PORT
      - OAUTH2_CLIENT_ID=$API_MQTT_CLIENT_ID
      - OAUTH2_CLIENT_SECRET=$API_MQTT_CLIENT_SECRET
      - MODEL_HOST=$HOST
      - API_URL=$PROTOCOL://$HOST:$PORT/api
      - KETO_URL=$PROTOCOL://$HOST:$PORT
      - HYDRA_ADMIN_URL=$PROTOCOL://$HOST:$PORT
      - OAUTH2_TOKEN_URL=$PROTOCOL://$HOST:$PORT/oauth2/token
      - MQTT_CLIENT_USER=$MQTT_CLIENT_ID
      - MQTT_CLIENT_PASS=$MQTT_CLIENT_SECRET


  # == == == == == Data-Centric Hub - Stores == == == == ==

  dcd-store-influxdb:
    image: datacentricdesign/dcd-store-influxdb:latest
#    build:
#      context: ../dcd-store-influxdb
#      dockerfile: Dockerfile
    container_name: dcd-store-influxdb
    environment:
      - LOG_LEVEL=INFO
      - INFLUXDB_HOST=influxdb
      - INFLUXDB_NAME=dcdhub
      - HTTPS=true
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - CRYPTO_KEY=$CRYPTO_KEY
      - KAFKA=true
      - KAFKA_HOST=kafka
      - KAFKA_PORT=$KAFKA_PORT

  # == == == == == Data-Centric Hub - Web Portals == == == == ==

  dcd-auth:
    image: datacentricdesign/dcd-auth:latest
#    build:
#      context: ../dcd-auth
#      dockerfile: Dockerfile
    container_name: dcd-auth
    environment:
      - LOG_LEVEL=$LOG_LEVEL
      - HTTPS=true
      - GRAFANA_PASSWORD=admin
      - PORT=8888
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - CRYPTO_KEY=$CRYPTO_KEY
      - API_URL=http://dcd-api-http:4478/api
      - KETO_URL=$PROTOCOL://$HOST:$PORT
      - HYDRA_ADMIN_URL=http://hydra:4445
      - OAUTH2_TOKEN_URL=$PROTOCOL://$HOST:$PORT/oauth2/token
      - OAUTH2_CLIENT_ID=$AUTH_CLIENT_ID
      - OAUTH2_CLIENT_SECRET=$AUTH_CLIENT_SECRET

  dcd-data-subject:
    image: datacentricdesign/dcd-data-subject:latest
#    build:
#      context: ../dcd-data-subject
#      dockerfile: Dockerfile
    container_name: dcd-data-subject
    environment:
      - LOG_LEVEL=$LOG_LEVEL
      - HTTPS=true
      - PORT=8080
      - BASE_URL=/subject
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - SERVER_URL=$PROTOCOL://$HOST:$PORT
      - OAUTH2_AUTH_URL=$PROTOCOL://$HOST:$PORT/oauth2/auth
      - OAUTH2_TOKEN_URL=$PROTOCOL://$HOST:$PORT/oauth2/token
      - OAUTH2_CLIENT_ID=$APP_SUBJECT_CLIENT_ID
      - OAUTH2_CLIENT_SECRET=$APP_SUBJECT_CLIENT_SECRET
      - OAUTH2_PROFILE=$PROTOCOL://$HOST:$PORT/userinfo
      - OAUTH2_REDIRECT_URL=$PROTOCOL://$HOST:$PORT/subject/auth/callback
      - API_URL=$PROTOCOL://$HOST:$PORT/api
      - MAPS_KEY=$MAPS_KEY

  dcd-website:
    image: datacentricdesign/dcd-website:latest
#    build:
#      context: ../dcd-website
#      dockerfile: Dockerfile
    container_name: dcd-website

  # == == == == == Data-Centric Hub - Processors == == == == ==

  dcd-processor:
    image: datacentricdesign/dcd-processor:latest
#    build:
#      context: ../dcd-processor
#      dockerfile: Dockerfile
    container_name: dcd-processor
    environment:
      - LOG_LEVEL=DEBUG
      - HTTPS=true
      - CRYPTO_KEY=$CRYPTO_KEY
      - KAFKA=true
      - KAFKA_HOST=kafka
      - KAFKA_PORT=$KAFKA_PORT
      - CHECK_ACTIVITY_COUNT=60000
      - AUTH_ENABLED=false
