version: '3'

# This compose will load all the containers required
# for running the hub in production
services:

  # Proxy making only the services we want to expose available on the same port
  ambassador:
    image: quay.io/datawire/ambassador:0.76.0
    container_name: ambassador
    ports:
      - 80:8080
      - 443:8443
    volumes:
      - ./config/ambassador:/ambassador/ambassador-config
      - ./certs:/etc/certs
    environment:
      # don't try to watch Kubernetes for configuration changes
      - AMBASSADOR_NO_KUBEWATCH=no_kubewatch
      - AMBASSADOR_NO_SECRETS=True

  # Hydra is the OAuth2 server
  # It allows client applications
  hydra:
    image: oryd/hydra:$HYDRA_VERSION
    container_name: hydra
    depends_on:
      - hydra-migrate
    command:
      serve all
    environment:
      - LOG_LEVEL=$LOG_LEVEL
      - SECRETS_SYSTEM=$HYDRA_SYSTEM_SECRET
      - DSN=postgres://$AC_DB_USER:$AC_DB_PASSWORD@postgresd:5432/$AC_DB?sslmode=disable
      - URLS_CONSENT=$PROTOCOL://$HOST:$PORT/auth/consent
      - URLS_LOGIN=$PROTOCOL://$HOST:$PORT/auth/signin
      - URLS_LOGOUT=$PROTOCOL://$HOST:$PORT/auth/logout
      - URLS_ERROR=$PROTOCOL://$HOST:$PORT/auth/error
      - URLS_SELF_ISSUER=$PROTOCOL://$HOST:$PORT
      - OAUTH2_EXPOSE_INTERNAL_ERRORS=1
      - TTL_AUTH_CODE=2400h
      - TTL_ID_TOKEN=2400h
      - TTL_ACCESS_TOKEN=2400h
      - TTL_REFRESH_TOKEN=72000h
      - TTL_LOGIN_CONSENT_REQUEST=15m
      - ISSUER_URL=$PROTOCOL://$HOST:$PORT
      - SERVE_TLS_ALLOW_TERMINATION_FROM=172.20.0.22/24
      - CORS_ALLOWED_ORIGINS=http://localhost:4200
    volumes:
      - ./certs:/etc/certs
      - ./config/hydra/.hydra:/.hydra
    restart: on-failure


  # Create all the necessary data environment in postgres for Hydra
  hydra-migrate:
    image: oryd/hydra:$HYDRA_VERSION
    container_name: hydra-migrate
    environment:
      - LOG_LEVEL=$LOG_LEVEL
      - HYDRA_SYSTEM_SECRET=$HYDRA_SYSTEM_SECRET
    command:
      migrate sql postgres://$AC_DB_USER:$AC_DB_PASSWORD@postgresd:5432/$AC_DB?sslmode=disable --yes
    restart: on-failure

  # Keto is the Access Control Policy (ACP) manager
  # It allows access to resources (e.g. things, persons...)
  keto:
    image: oryd/keto:$KETO_VERSION
    container_name: keto
    depends_on:
      - hydra
      - keto-migrate
    environment:
      - LOG_LEVEL=$LOG_LEVEL
      - DSN=postgres://$AC_DB_USER:$AC_DB_PASSWORD@postgresd:5432/$AC_DB?sslmode=disable
      - AUTHENTICATOR_OAUTH2_INTROSPECTION_CLIENT_ID=$KETO_CLIENT_ID
      - AUTHENTICATOR_OAUTH2_INTROSPECTION_CLIENT_SECRET=$KETO_CLIENT_SECRET
      - AUTHENTICATOR_OAUTH2_INTROSPECTION_TOKEN_URL=$PROTOCOL://$HOST:$PORT/oauth2/token
      - AUTHENTICATOR_OAUTH2_INTROSPECTION_URL=$PROTOCOL://$HOST:$PORT/oauth2/introspect
      - AUTHENTICATOR_OAUTH2_CLIENT_CREDENTIALS_TOKEN_URL=$PROTOCOL://$HOST:$PORT/oauth2/token
    restart: on-failure

  # Creates all the necessary data environment in postgres for Keto
  keto-migrate:
    image: oryd/keto:$KETO_VERSION
    container_name: keto-migrate
    environment:
      - LOG_LEVEL=$LOG_LEVEL
    command:
      migrate sql postgres://$AC_DB_USER:$AC_DB_PASSWORD@postgresd:5432/$AC_DB?sslmode=disable
    restart: on-failure

  # Creates all Hydra Clients (from config/hydra/clients) and Keto ACPs (fromconfig/keto/policies|roles)
  configurator:
    build:
      context: ../configurator
      args:
        - HYDRA_VERSION=$HYDRA_VERSION
        - KETO_VERSION=$KETO_VERSION
    container_name: configurator
    depends_on:
      - hydra
      - keto
    volumes:
      - ../configurator/scripts:/scripts
    environment:
      # All of these URLs MUST NOT end with a trailing slash. This is very important!
      - HYDRA_URL=http://hydra:4444
      - HYDRA_ADMIN_URL=http://hydra:4445
      - KETO_URL=http://keto:4466
      # This sets the prefix for all resource, action, and subject names.
      # Be aware that this prefix is automatically applied to all OAuth2 Clients as well.
      - "HYDRA_SUBJECT_PREFIX=subjects:hydra:"
      - "HYDRA_RESOURCE_PREFIX=resources:hydra:"
      - "HYDRA_ACTION_PREFIX=actions:hydra:"
      - "KETO_RESOURCE_PREFIX=resources:keto:"
      - "KETO_ACTION_PREFIX=actions:keto:"
      - KETO_CLIENT_ID=$KETO_CLIENT_ID
      - KETO_CLIENT_SECRET=$KETO_CLIENT_SECRET
      - API_HTTP_CLIENT_ID=$API_HTTP_CLIENT_ID
      - API_HTTP_CLIENT_SECRET=$API_HTTP_CLIENT_SECRET
      - API_MQTT_CLIENT_ID=$API_MQTT_CLIENT_ID
      - API_MQTT_CLIENT_SECRET=$API_MQTT_CLIENT_SECRET
      - APP_IDENTITY_PROVIDER_CLIENT_ID=$APP_IDENTITY_PROVIDER_CLIENT_ID
      - APP_IDENTITY_PROVIDER_CLIENT_SECRET=$APP_IDENTITY_PROVIDER_CLIENT_SECRET
      - APP_IDENTITY_PROVIDER_SCOPE=$APP_IDENTITY_PROVIDER_SCOPE
      - APP_SUBJECT_CLIENT_ID=$APP_SUBJECT_CLIENT_ID
      - APP_SUBJECT_CLIENT_SECRET=$APP_SUBJECT_CLIENT_SECRET
      - APP_SUBJECT_SCOPE=$APP_SUBJECT_SCOPE
      - APP_MOBILE_CLIENT_ID=$APP_MOBILE_CLIENT_ID
      - APP_MOBILE_SCOPE=$APP_MOBILE_SCOPE
      - PORT=$PORT
      - PROTOCOL=$PROTOCOL
      - HOST=$HOST
    restart: on-failure

  # Kafka is a data pipeline, ingesting data from producers (e.g. APIs, data processors)
  # and distributing it to all consumers (e.g. databases, data processors)
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=$HOST
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - "KAFKA_CREATE_TOPICS=things:1:1:compact,persons:1:1:compact,properties:1:1:compact,values:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  # Zookeeper is a message layer necessary for Kafka
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper

  # == == == == == Stores == == == == ==

  # InfluxDB is a time series database, used to store the data
  # Stored on $HOST_DATA_FOLDER/influxdb
  influxdb:
    image: influxdb
    container_name: influxdb
    volumes:
      - $HOST_DATA_FOLDER/influxdb:/var/lib/influxdb
    environment:
      - INFLUXDB_DB=$INFLUXDB_DB
      - INFLUXDB_ADMIN_ENABLED=true

  # This Kafka consumer push data into InfluxDB
  dcd-store-influxdb:
    image: datacentricdesign/dcd-store-influxdb:$DCD_STORE_INFLUXDB_VERSION
    container_name: dcd-store-influxdb
    environment:
      - LOG_LEVEL=$LOG_LEVEL
      - INFLUXDB_HOST=influxdb
      - INFLUXDB_NAME=dcdhub
      - HTTPS=true
      - CRYPTO_KEY=$CRYPTO_KEY
      - KAFKA=true
      - KAFKA_HOST=kafka
      - KAFKA_PORT=$KAFKA_PORT

  # mysql is a relational database, used to store metadata
  # Stored on $HOST_DATA_FOLDER/mysql
  mysql:
    image: mysql:5.7
    container_name: mysql
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=$MYSQL_SYSTEM_SECRET
    volumes:
      - $HOST_DATA_FOLDER/mysql:/var/lib/mysql
      - ../model/init.sql:/docker-entrypoint-initdb.d/init.sql

  # Postgres is a relational database, used to store Hydra and Keto data
  # Stored on $HOST_DATA_FOLDER/postgresql
  postgresd:
    image: postgres:9.6
    container_name: postgres
    environment:
      - POSTGRES_USER=$AC_DB_USER
      - POSTGRES_PASSWORD=$AC_DB_PASSWORD
      - POSTGRES_DB=$AC_DB
    volumes:
      - $HOST_DATA_FOLDER/postgresql:/var/lib/postgresql/data

  # == == == == == Logging == == == == ==

  logspout:
    image: bekt/logspout-logstash
    container_name: logspout
    restart: on-failure
    environment:
      ROUTE_URIS: logstash://logstash:5000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  logstash:
    image: logstash:7.2.0
    container_name: logstash
    command: bin/logstash -f /opt/logstash/logstash.conf
    volumes:
      - ./config/logs/logstash.conf:/opt/logstash/logstash.conf
      - $HOST_DATA_FOLDER/logs:/var/log/logstash

  # == == == == == Data-Centric Hub - APIs == == == == ==
  # HTTP and MQTT APIs are 2 ways to interact with the dcd hub

  dcd-api-http:
    image: datacentricdesign/dcd-api-http:$DCD_API_HTTP_VERSION
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=$LOG_LEVEL
      - PORT=4478
      - CRYPTO_KEY=$CRYPTO_KEY
      - MODEL_HOST=$HOST
      - MODEL_PASS=$MYSQL_SYSTEM_SECRET
      - KAFKA=true
      - HTTPS=true
      - KAFKA_HOST=kafka
      - KAFKA_PORT=$KAFKA_PORT
      - API_URL=$PROTOCOL://$HOST:$PORT/api
      - KETO_URL=http://keto:4466
      - HYDRA_ADMIN_URL=http://hydra:4445
      - HYDRA_URL=$PROTOCOL://$HOST:$PORT
      - OAUTH2_TOKEN_URL=http://hydra:4444/oauth2/token
      - OAUTH2_REVOKE_URL=http://hydra:4444/oauth2/revoke
      - OAUTH2_CLIENT_ID=$API_HTTP_CLIENT_ID
      - OAUTH2_CLIENT_SECRET=$API_HTTP_CLIENT_SECRET
      - OAUTH2_INTROSPECT_URL=http://hydra:4445/oauth2/introspect
    volumes:
      - $HOST_DATA_FOLDER/files:/usr/src/app/files

  dcd-api-mqtt:
    image: datacentricdesign/dcd-api-mqtt:$DCD_API_MQTT_VERSION
    container_name: dcd-api-mqtt
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=$LOG_LEVEL
      - HTTPS=true
      - MQTT_HOST=0.0.0.0
      - CRYPTO_KEY=$CRYPTO_KEY
      - KAFKA=true
      - KAFKA_HOST=kafka
      - KAFKA_PORT=$KAFKA_PORT
      - OAUTH2_CLIENT_ID=$API_MQTT_CLIENT_ID
      - OAUTH2_CLIENT_SECRET=$API_MQTT_CLIENT_SECRET
      - MODEL_HOST=$HOST
      - API_URL=$PROTOCOL://$HOST:$PORT/api
      - KETO_URL=http://keto:4466
      - HYDRA_ADMIN_URL=http://hydra:4445
      - OAUTH2_TOKEN_URL=http://hydra:4444/oauth2/token
      - OAUTH2_REVOKE_URL=http://hydra:4444/oauth2/revoke
      - MQTT_CLIENT_USER=$API_MQTT_CLIENT_ID
      - MQTT_CLIENT_PASS=$API_MQTT_CLIENT_SECRET
    volumes:
      - ./certs:/etc/certs


  # == == == == == Data-Centric Hub - Apps == == == == ==

  # Necessary app to sign in/up and receive an bearer token from Hydra
  dcd-app-identity-provider:
    image: datacentricdesign/dcd-app-identity-provider:$DCD_APP_IDENTITY_PROVIDER_VERSION
    container_name: dcd-app-identity-provider
    environment:
      - LOG_LEVEL=$LOG_LEVEL
      - HTTPS=true
      - PORT=8888
      - CRYPTO_KEY=$CRYPTO_KEY
      - API_URL=http://dcd-api-http:4478/api
      - KETO_URL=$PROTOCOL://$HOST:$PORT
      - HYDRA_ADMIN_URL=http://hydra:4445
      - OAUTH2_TOKEN_URL=http://hydra:4444/oauth2/token
      - OAUTH2_REVOKE_URL=http://hydra:4444/oauth2/revoke
      - OAUTH2_CLIENT_ID=$APP_IDENTITY_PROVIDER_CLIENT_ID
      - OAUTH2_CLIENT_SECRET=$APP_IDENTITY_PROVIDER_CLIENT_SECRET
      - OAUTH2_SCOPE=$APP_IDENTITY_PROVIDER_SCOPE
      - FIRST_PARTY_APPS=$APP_SUBJECT_CLIENT_ID,$APP_MOBILE_CLIENT_ID

  dcd-app-subject:
    image: datacentricdesign/dcd-app-subject:$DCD_APP_SUBJECT_VERSION
    container_name: dcd-app-subject
    environment:
      - LOG_LEVEL=$LOG_LEVEL
      - HTTPS=true
      - PORT=8080
      - BASE_URL=/subject
      - SERVER_URL=$PROTOCOL://$HOST:$PORT
      - OAUTH2_AUTH_URL=$PROTOCOL://$HOST:$PORT/oauth2/auth
      - OAUTH2_TOKEN_URL=$PROTOCOL://$HOST:$PORT/oauth2/token
      - OAUTH2_REVOKE_URL=$PROTOCOL://$HOST:$PORT/oauth2/revoke
      - OAUTH2_CLIENT_ID=$APP_SUBJECT_CLIENT_ID
      - OAUTH2_CLIENT_SECRET=$APP_SUBJECT_CLIENT_SECRET
      - OAUTH2_PROFILE=$PROTOCOL://$HOST:$PORT/userinfo
      - OAUTH2_REDIRECT_URL=$PROTOCOL://$HOST:$PORT/subject/auth/callback
      - OAUTH2_SCOPE=$APP_SUBJECT_SCOPE
      - API_URL=$PROTOCOL://$HOST:$PORT/api
      - MAPS_KEY=$MAPS_KEY
